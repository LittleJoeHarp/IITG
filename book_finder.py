from langchain.chains import create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_history_aware_retriever
from langchain_core.chat_history import BaseChatMessageHistory
from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.messages import HumanMessage
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_google_genai import GoogleGenerativeAI
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
import google.generativeai as genai
import streamlit as st

llm=GoogleGenerativeAI(model="gemini-1.0-pro-latest")
embeddings=HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLm-L6-v2", model_kwargs={'device':'cpu'})
db=FAISS.load_local("vectorstore/db_faiss",embeddings,allow_dangerous_deserialization=True)
retriever=db.as_retriever(search_kwargs={"k": 7})

contextualize_q_system_prompt = """Given a chat history and the latest user question \
which might reference context in the chat history, formulate a standalone question \
which can be understood without the chat history. Do NOT answer the question, \
just reformulate it if needed and otherwise return it as is."""
contextualize_q_prompt = ChatPromptTemplate.from_messages(
    [
        ("system", contextualize_q_system_prompt),
        MessagesPlaceholder("chat_history"),
        ("human", "{input}"),
    ]
)

history_aware_retriever = create_history_aware_retriever(
    llm, retriever, contextualize_q_prompt
)

qa_system_prompt = """

**System Prompt for Bookstore RAG Application**

You are an intelligent assistant for an online bookstore, designed to help customers with various tasks related to buying, tracking, and filtering books. You can answer questions and provide assistance based on the following information available in the bookstore's dataset:

- **Index:** A unique identifier for each book.
- **Publishing Year:** The year the book was published.
- **Book Name:** The title of the book.
- **Author:** The person or people who wrote the book.
- **Language Code:** The language in which the book is written.
- **Author Rating:** The average rating of the author based on their works.
- **Book Average Rating:** The average rating of the book, typically on a scale of 1 to 5.
- **Book Ratings Count:** The number of ratings the book has received.
- **Genre:** The category or type of the book (e.g., Fiction, Non-Fiction, Mystery, Science Fiction).
- **Gross Sales:** The total sales revenue generated by the book.
- **Publisher Revenue:** The revenue earned by the publisher from the book.
- **Sale Price:** The cost of the book.
- **Sales Rank:** The rank of the book based on its sales performance.
- **Publisher:** The company that published the book.
- **Units Sold:** The number of copies sold.

**Your tasks include:**

1. **Helping clients buy books:**
   - Provide detailed information about books based on client queries.
   - Compare books based on parameters such as price, average rating, author rating, and availability.
   - Assist clients in finding books by specific authors, genres, or publishers.

2. **Keeping track of books:**
   - Help clients maintain a list of books they are interested in or have purchased.
   - Notify clients about the availability of books they are tracking.

3. **Filtering books:**
   - Allow clients to filter books based on various parameters such as price range, genre, author rating, book average rating, and publishing year.
   - Recommend books based on client preferences and reading history.

4. **Customer support:**
   - Address client inquiries about book details, purchasing process, order status, and return policies.
   - Provide troubleshooting assistance for any issues related to the bookstore services.

**Example Queries:**
- "Show me all mystery books with a book average rating of 4 or higher."
- "I am looking for books under $15 in the science fiction genre."
- "What is the sales rank of 'The Great Gatsby'?"
- "Can you recommend some popular non-fiction books by highly rated authors?"
- "How do I track my order for 'To Kill a Mockingbird'?"

**Note:** Always ensure your responses are accurate, helpful, and polite, aiming to enhance the customerâ€™s shopping experience.

---
You are to only give what is required. 
{context}"""
qa_prompt = ChatPromptTemplate.from_messages(
    [
        ("system", qa_system_prompt),
        MessagesPlaceholder("chat_history"),
        ("human", "{input}"),
    ]
)

question_answer_chain = create_stuff_documents_chain(llm, qa_prompt)
rag_chain = create_retrieval_chain(history_aware_retriever, question_answer_chain)

store={}
    
def get_session_history(session_id: str) -> BaseChatMessageHistory:
    if session_id not in store:
        store[session_id] = ChatMessageHistory()
    return store[session_id]


conversational_rag_chain = RunnableWithMessageHistory(
    rag_chain,
    get_session_history,
    input_messages_key="input",
    history_messages_key="chat_history",
    output_messages_key="answer",
)
prompt=input("Enter your query:")
while(prompt!="exit"):
    print(conversational_rag_chain.invoke(
        {"input": prompt},
        config={
            "configurable": {"session_id": "abc123"}
        },  # constructs a key "abc123" in `store`.
    )["answer"])
    print("\n")
    prompt=input()

